// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Garbage classification AI agent.
 *
 * - classifyGarbage - A function that handles the garbage classification process.
 * - ClassifyGarbageInput - The input type for the classifyGarbage function.
 * - ClassifyGarbageOutput - The return type for the classifyGarbage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ClassifyGarbageInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of the item, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ClassifyGarbageInput = z.infer<typeof ClassifyGarbageInputSchema>;

const ClassifyGarbageOutputSchema = z.object({
  category: z.enum(['recyclable', 'non-recyclable', 'other']).describe('The predicted garbage category.'),
  confidence: z.number().describe('The confidence score of the classification (0-1).'),
  reason: z.string().describe('The reasoning behind the classification.'),
});
export type ClassifyGarbageOutput = z.infer<typeof ClassifyGarbageOutputSchema>;

export async function classifyGarbage(input: ClassifyGarbageInput): Promise<ClassifyGarbageOutput> {
  return classifyGarbageFlow(input);
}

const prompt = ai.definePrompt({
  name: 'classifyGarbagePrompt',
  input: {schema: ClassifyGarbageInputSchema},
  output: {schema: ClassifyGarbageOutputSchema},
  prompt: `You are an expert in waste management and can accurately classify garbage items based on images.

  Analyze the following image and determine if the item is recyclable, non-recyclable, or other.

  Return a JSON object with the following format:
  {
    "category": "recyclable" | "non-recyclable" | "other",
    "confidence": number (0-1),
    "reason": string
  }

  Be sure to justify your decision in the 'reason' field.

  Image: {{media url=photoDataUri}}
  `,
});

const classifyGarbageFlow = ai.defineFlow(
  {
    name: 'classifyGarbageFlow',
    inputSchema: ClassifyGarbageInputSchema,
    outputSchema: ClassifyGarbageOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
